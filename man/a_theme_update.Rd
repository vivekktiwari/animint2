% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/theme.r
\name{a_theme_update}
\alias{a_theme_update}
\alias{a_theme_replace}
\alias{a_theme_get}
\alias{a_theme_set}
\title{Get, set and update a_themes.}
\usage{
a_theme_update(...)

a_theme_replace(...)

a_theme_get()

a_theme_set(new)
}
\arguments{
\item{...}{named list of a_theme settings}

\item{new}{new a_theme (a list of a_theme elements)}
}
\description{
Use \code{a_theme_get} to get the current a_theme, and \code{a_theme_set} to
completely override it. \code{a_theme_update} and \code{a_theme_replace} are
shorthands for changing individual elements in the current a_theme.
\code{a_theme_update} uses the \code{+} operator, so that any unspecified
values in the a_theme element will default to the values they are set in the
a_theme. \code{a_theme_replace} will completely replace the element, so any
unspecified values will overwrite the current value in the a_theme with \code{NULL}s.
}
\examples{
p <- a_plot(mtcars, a_aes(mpg, wt)) +
  a_geom_point()
p
old <- a_theme_set(a_theme_bw())
p
a_theme_set(old)
p

#a_theme_replace NULLs out the fill attribute of panel.background,
#resulting in a white background:
a_theme_get()$panel.background
old <- a_theme_replace(panel.background = a_element_rect(colour = "pink"))
a_theme_get()$panel.background
p
a_theme_set(old)

#a_theme_update only changes the colour attribute, leaving the others intact:
old <- a_theme_update(panel.background = a_element_rect(colour = "pink"))
a_theme_get()$panel.background
p
a_theme_set(old)

a_theme_get()


a_plot(mtcars, a_aes(mpg, wt)) +
  a_geom_point(a_aes(color = mpg)) +
  a_theme(legend.a_position = c(0.95, 0.95),
        legend.justification = c(1, 1))
last_plot() +
 a_theme(legend.background = a_element_rect(fill = "white", colour = "white", size = 3))

}
\seealso{
\code{\link{\%+replace\%}} and \code{\link{+.aaa}}
}
