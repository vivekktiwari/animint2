% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/geom-abline.r, R/geom-hline.r, R/geom-vline.r
\name{a_geom_abline}
\alias{a_geom_abline}
\alias{a_geom_hline}
\alias{a_geom_vline}
\title{Lines: horizontal, vertical, and specified by slope and intercept.}
\usage{
a_geom_abline(mapping = NULL, data = NULL, ..., slope, intercept,
  na.rm = FALSE, show.legend = NA)

a_geom_hline(mapping = NULL, data = NULL, ..., yintercept, na.rm = FALSE,
  show.legend = NA)

a_geom_vline(mapping = NULL, data = NULL, ..., xintercept, na.rm = FALSE,
  show.legend = NA)
}
\arguments{
\item{mapping}{Set of aesthetic mappings created by \code{\link{a_aes}} or
\code{\link{a_aes_}}. If specified and \code{inherit.a_aes = TRUE} (the
default), it is combined with the default mapping at the top level of the
plot. You must supply \code{mapping} if there is no plot mapping.}

\item{data}{The data to be displayed in this layer. There are three
   options:

   If \code{NULL}, the default, the data is inherited from the plot
   data as specified in the call to \code{\link{a_plot}}.

   A \code{data.frame}, or other object, will override the plot
   data. All objects will be fortified to produce a data frame. See
   \code{\link{a_fortify}} for which variables will be created.

   A \code{function} will be called with a single argument,
   the plot data. The return value must be a \code{data.frame.}, and
   will be used as the layer data.}

\item{...}{other arguments passed on to \code{\link{a_layer}}. These are
often aesthetics, used to set an aesthetic to a fixed value, like
\code{color = "red"} or \code{size = 3}. They may also be parameters
to the paired a_geom/a_stat.}

\item{na.rm}{If \code{FALSE} (the default), removes missing values with
a warning.  If \code{TRUE} silently removes missing values.}

\item{show.legend}{logical. Should this layer be included in the legends?
\code{NA}, the default, includes if any aesthetics are mapped.
\code{FALSE} never includes, and \code{TRUE} always includes.}

\item{xintercept, yintercept, slope, intercept}{Parameters that control the
position of the line. If these are set, \code{data}, \code{mapping} and
\code{show.legend} are overridden}
}
\description{
These paired geoms and stats add straight lines to a plot, either
horizontal, vertical or specified by slope and intercept. These are useful
for annotating plots.
}
\details{
These geoms act slightly different to other geoms. You can supply the
parameters in two ways: either as arguments to the a_layer function,
or via aesthetics. If you use arguments, e.g.
\code{a_geom_abline(intercept = 0, slope = 1)}, then behind the scenes
the geom makes a new data frame containing just the data you've supplied.
That means that the lines will be the same in all facets; if you want them
to vary across facets, construct the data frame yourself and use aesthetics.

Unlike most other geoms, these geoms do not inherit aesthetics from the plot
default, because they do not understand x and y aesthetics which are
commonly set in the plot. They also do not affect the x and y scales.
}
\section{Aesthetics}{

These geoms are drawn using with \code{\link{a_geom_line}} so support the
same aesthetics: alpha, colour, linetype and size. They also each have
aesthetics that control the position of the line:

\itemize{
  \item \code{a_geom_vline}: \code{xintercept}
  \item \code{a_geom_hline}: \code{yintercept}
  \item \code{a_geom_abline}: \code{slope} and \code{intercept}
}
}

\examples{
p <- a_plot(mtcars, a_aes(wt, mpg)) + a_geom_point()

# Fixed values
p + a_geom_vline(xintercept = 5)
p + a_geom_vline(xintercept = 1:5)
p + a_geom_hline(yintercept = 20)

p + a_geom_abline() # Can't see it - outside the range of the data
p + a_geom_abline(intercept = 20)

# Calculate slope and intercept of line of best fit
coef(lm(mpg ~ wt, data = mtcars))
p + a_geom_abline(intercept = 37, slope = -5)
# But this is easier to do with a_geom_smooth:
p + a_geom_smooth(method = "lm", se = FALSE)

# To show different lines in different facets, use aesthetics
p <- a_plot(mtcars, a_aes(mpg, wt)) +
  a_geom_point() +
  a_facet_wrap(~ cyl)

mean_wt <- data.frame(cyl = c(4, 6, 8), wt = c(2.28, 3.11, 4.00))
p + a_geom_hline(a_aes(yintercept = wt), mean_wt)

# You can also control other aesthetics
a_plot(mtcars, a_aes(mpg, wt, colour = wt)) +
  a_geom_point() +
  a_geom_hline(a_aes(yintercept = wt, colour = wt), mean_wt) +
  a_facet_wrap(~ cyl)
}
\seealso{
See \code{\link{a_geom_segment}} for a more general approach to
  adding straight line segments to a plot.
}
