% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/geom-point.r
\name{a_geom_point}
\alias{a_geom_point}
\title{Points, as for a scatterplot}
\usage{
a_geom_point(mapping = NULL, data = NULL, a_stat = "identity",
  a_position = "identity", ..., na.rm = FALSE, show.legend = NA,
  inherit.a_aes = TRUE)
}
\arguments{
\item{mapping}{Set of aesthetic mappings created by \code{\link{a_aes}} or
\code{\link{a_aes_}}. If specified and \code{inherit.a_aes = TRUE} (the
default), it is combined with the default mapping at the top level of the
plot. You must supply \code{mapping} if there is no plot mapping.}

\item{data}{The data to be displayed in this layer. There are three
   options:

   If \code{NULL}, the default, the data is inherited from the plot
   data as specified in the call to \code{\link{a_plot}}.

   A \code{data.frame}, or other object, will override the plot
   data. All objects will be fortified to produce a data frame. See
   \code{\link{a_fortify}} for which variables will be created.

   A \code{function} will be called with a single argument,
   the plot data. The return value must be a \code{data.frame.}, and
   will be used as the layer data.}

\item{a_stat}{The statistical transformation to use on the data for this
layer, as a string.}

\item{a_position}{Position adjustment, either as a string, or the result of
a call to a position adjustment function.}

\item{...}{other arguments passed on to \code{\link{a_layer}}. These are
often aesthetics, used to set an aesthetic to a fixed value, like
\code{color = "red"} or \code{size = 3}. They may also be parameters
to the paired a_geom/a_stat.}

\item{na.rm}{If \code{FALSE} (the default), removes missing values with
a warning.  If \code{TRUE} silently removes missing values.}

\item{show.legend}{logical. Should this layer be included in the legends?
\code{NA}, the default, includes if any aesthetics are mapped.
\code{FALSE} never includes, and \code{TRUE} always includes.}

\item{inherit.a_aes}{If \code{FALSE}, overrides the default aesthetics,
rather than combining with them. This is most useful for helper functions
that define both data and aesthetics and shouldn't inherit behaviour from
the default plot specification, e.g. \code{\link{borders}}.}
}
\description{
The point geom is used to create scatterplots.
}
\details{
The scatterplot is useful for displaying the relationship between two
continuous variables, although it can also be used with one continuous
and one categorical variable, or two categorical variables.  See
\code{\link{a_geom_jitter}} for possibilities.

The \emph{bubblechart} is a scatterplot with a third variable mapped to
the size of points.  There are no special names for scatterplots where
another variable is mapped to point shape or colour, however.

The biggest potential problem with a scatterplot is overplotting: whenever
you have more than a few points, points may be plotted on top of one
another. This can severely distort the visual appearance of the plot.
There is no one solution to this problem, but there are some techniques
that can help.  You can add additional information with
\code{\link{a_geom_smooth}}, \code{\link{a_geom_quantile}} or
\code{\link{a_geom_density_2d}}.  If you have few unique x values,
\code{\link{a_geom_boxplot}} may also be useful.  Alternatively, you can
summarise the number of points at each location and display that in some
way, using \code{\link{a_stat_sum}}. Another technique is to use transparent
points, e.g. \code{a_geom_point(alpha = 0.05)}.
}
\section{Aesthetics}{

\Sexpr[results=rd,stage=build]{animint2:::rd_aesthetics("a_geom", "point")}
}

\examples{
p <- a_plot(mtcars, a_aes(wt, mpg))
p + a_geom_point()

# Add a_aesthetic mappings
p + a_geom_point(a_aes(colour = factor(cyl)))
p + a_geom_point(a_aes(shape = factor(cyl)))
p + a_geom_point(a_aes(size = qsec))

# Change scales
p + a_geom_point(a_aes(colour = cyl)) + a_scale_colour_gradient(low = "blue")
p + a_geom_point(a_aes(shape = factor(cyl))) + a_scale_shape(solid = FALSE)

# Set a_aesthetics to fixed value
a_plot(mtcars, a_aes(wt, mpg)) + a_geom_point(colour = "red", size = 3)

\donttest{
# Varying alpha is useful for large datasets
d <- a_plot(diamonds, a_aes(carat, price))
d + a_geom_point(alpha = 1/10)
d + a_geom_point(alpha = 1/20)
d + a_geom_point(alpha = 1/100)
}

# For shapes that have a border (like 21), you can colour the inside and
# outside separately. Use the stroke aesthetic to modify the width of the
# border
a_plot(mtcars, a_aes(wt, mpg)) +
  a_geom_point(shape = 21, colour = "black", fill = "white", size = 5, stroke = 5)

\donttest{
# You can create interesting shapes by layering multiple points of
# different sizes
p <- a_plot(mtcars, a_aes(mpg, wt, shape = factor(cyl)))
p + a_geom_point(a_aes(colour = factor(cyl)), size = 4) +
  a_geom_point(colour = "grey90", size = 1.5)
p + a_geom_point(colour = "black", size = 4.5) +
  a_geom_point(colour = "pink", size = 4) +
  a_geom_point(a_aes(shape = factor(cyl)))

# These extra layers don't usually appear in the legend, but we can
# force their inclusion
p + a_geom_point(colour = "black", size = 4.5, show.legend = TRUE) +
  a_geom_point(colour = "pink", size = 4, show.legend = TRUE) +
  a_geom_point(a_aes(shape = factor(cyl)))

# a_geom_point warns when missing values have been dropped from the data set
# and not plotted, you can turn this off by setting na.rm = TRUE
mtcars2 <- transform(mtcars, mpg = ifelse(runif(32) < 0.2, NA, mpg))
a_plot(mtcars2, a_aes(wt, mpg)) + a_geom_point()
a_plot(mtcars2, a_aes(wt, mpg)) + a_geom_point(na.rm = TRUE)
}
}
\seealso{
\code{\link{a_scale_size}} to see scale area of points, instead of
  radius, \code{\link{a_geom_jitter}} to jitter points to reduce (mild)
  overplotting
}
