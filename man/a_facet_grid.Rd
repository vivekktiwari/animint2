% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/facet-grid-.r
\name{a_facet_grid}
\alias{a_facet_grid}
\title{Lay out panels in a grid.}
\usage{
a_facet_grid(facets, margins = FALSE, scales = "fixed", space = "fixed",
  shrink = TRUE, labeller = "a_label_value", as.table = TRUE,
  switch = NULL, drop = TRUE)
}
\arguments{
\item{facets}{a formula with the rows (of the tabular display) on the LHS
and the columns (of the tabular display) on the RHS; the dot in the
formula is used to indicate there should be no faceting on this dimension
(either row or column). The formula can also be provided as a string
instead of a classical formula object}

\item{margins}{either a logical value or a character
vector. Margins are additional facets which contain all the data
for each of the possible values of the faceting variables. If
\code{FALSE}, no additional facets are included (the
default). If \code{TRUE}, margins are included for all faceting
variables. If specified as a character vector, it is the names of
variables for which margins are to be created.}

\item{scales}{Are scales shared across all facets (the default,
\code{"fixed"}), or do they vary across rows (\code{"free_x"}),
columns (\code{"free_y"}), or both rows and columns (\code{"free"})}

\item{space}{If \code{"fixed"}, the default, all panels have the same size.
 If \code{"free_y"} their height will be proportional to the length of the
 y scale; if \code{"free_x"} their width will be proportional to the
length of the x scale; or if \code{"free"} both height and width will
vary.  This setting has no effect unless the appropriate scales also vary.}

\item{shrink}{If \code{TRUE}, will shrink scales to fit output of
statistics, not raw data. If \code{FALSE}, will be range of raw data
before statistical summary.}

\item{labeller}{A function that takes one data frame of labels and
returns a list or data frame of character vectors. Each input
column corresponds to one factor. Thus there will be more than
one with formulae of the type \code{~cyl + am}. Each output
column gets displayed as one separate line in the strip
label. This function should inherit from the "labeller" S3 class
for compatibility with \code{\link{labeller}()}. See
\code{\link{a_label_value}} for more details and pointers to other
options.}

\item{as.table}{If \code{TRUE}, the default, the facets are laid out like
a table with highest values at the bottom-right. If \code{FALSE}, the
facets are laid out like a plot with the highest value at the top-right.}

\item{switch}{By default, the labels are displayed on the top and
right of the plot. If \code{"x"}, the top labels will be
displayed to the bottom. If \code{"y"}, the right-hand side
labels will be displayed to the left. Can also be set to
\code{"both"}.}

\item{drop}{If \code{TRUE}, the default, all factor levels not used in the
data will automatically be dropped. If \code{FALSE}, all factor levels
will be shown, regardless of whether or not they appear in the data.}
}
\description{
Lay out panels in a grid.
}
\examples{
p <- a_plot(mpg, a_aes(displ, cty)) + a_geom_point()

p + a_facet_grid(. ~ cyl)
p + a_facet_grid(drv ~ .)
p + a_facet_grid(drv ~ cyl)

# To change plot order of facet grid,
# change the order of variable levels with factor()

# If you combine a facetted dataset with a dataset that lacks those
# facetting variables, the data will be repeated across the missing
# combinations:
df <- data.frame(displ = mean(mpg$displ), cty = mean(mpg$cty))
p +
  a_facet_grid(. ~ cyl) +
  a_geom_point(data = df, colour = "red", size = 2)

# Free scales -------------------------------------------------------
# You can also choose whether the scales should be constant
# across all panels (the default), or whether they should be allowed
# to vary
mt <- a_plot(mtcars, a_aes(mpg, wt, colour = factor(cyl))) +
  a_geom_point()

mt + a_facet_grid(. ~ cyl, scales = "free")

# If scales and space are free, then the mapping between position
# and values in the data will be the same across all panels. This
# is particularly useful for categorical axes
a_plot(mpg, a_aes(drv, model)) +
  a_geom_point() +
  a_facet_grid(manufacturer ~ ., scales = "free", space = "free") +
  a_theme(strip.text.y = a_element_text(angle = 0))

# Facet labels ------------------------------------------------------
p <- a_plot(mtcars, a_aes(wt, mpg)) + a_geom_point()
p

# a_label_both() displays both variable name and value
p + a_facet_grid(vs ~ cyl, labeller = a_label_both)

# a_label_parsed() parses text into mathematical expressions, see ?plotmath
mtcars$cyl2 <- factor(mtcars$cyl, labels = c("alpha", "beta", "sqrt(x, y)"))
a_plot(mtcars, a_aes(wt, mpg)) +
  a_geom_point() +
  a_facet_grid(. ~ cyl2, labeller = a_label_parsed)

# a_label_bquote() makes it easy to construct math expressions
p + a_facet_grid(. ~ vs, labeller = a_label_bquote(cols = alpha ^ .(vs)))

# The facet strips can be displayed near the axes with switch
data <- transform(mtcars,
  am = factor(am, levels = 0:1, c("Automatic", "Manual")),
  gear = factor(gear, levels = 3:5, labels = c("Three", "Four", "Five"))
)
p <- a_plot(data, a_aes(mpg, disp)) + a_geom_point()
p + a_facet_grid(am ~ gear, switch = "both")
# It looks better without boxes around the strips
p + a_facet_grid(am ~ gear, switch = "both") +
  a_theme(strip.background = a_element_blank())

# Margins ----------------------------------------------------------
\donttest{
# Margins can be specified by logically (all yes or all no) or by specific
# variables as (character) variable names
mg <- a_plot(mtcars, a_aes(x = mpg, y = wt)) + a_geom_point()
mg + a_facet_grid(vs + am ~ gear)
mg + a_facet_grid(vs + am ~ gear, margins = TRUE)
mg + a_facet_grid(vs + am ~ gear, margins = "am")
# when margins are made over "vs", since the facets for "am" vary
# within the values of "vs", the marginal facet for "vs" is also
# a margin over "am".
mg + a_facet_grid(vs + am ~ gear, margins = "vs")
mg + a_facet_grid(vs + am ~ gear, margins = "gear")
mg + a_facet_grid(vs + am ~ gear, margins = c("gear", "am"))
}
}
